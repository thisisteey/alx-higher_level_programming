Test case for the lazy_matrix_mul function

>>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

Test case 1: valid matrix NumPy multiplication
>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
array([[ 7, 10],
       [15, 22]])

Test case 2: TypeError if m_a is not a list
>>> lazy_matrix_mul("a_str", [[1, 4], [5, 6]])
Traceback (most recent call last):
...
TypeError: m_a should be a list

Test case 3: TypeError if m_b is not a list
>>> lazy_matrix_mul([[3, 6], [5, 7]], "a_str")
Traceback (most recent call last):
...
TypeError: m_b should be a list

Test case 4: TypeError if m_a is not a list of lists
>>> lazy_matrix_mul([("a_str"), [1, 2]], [[1, 4], [5, 6]])
Traceback (most recent call last):
...
TypeError: m_a should be a list of lists

Test case 5: TypeError if m_b is not a list of lists
>>> lazy_matrix_mul([[3, 6], [5, 7]], [{"a_str"}, [2, 6]])
Traceback (most recent call last):
...
TypeError: m_b should be a list of lists

Test case 6: ValueError if m_a is empty
>>> lazy_matrix_mul([], [[2, 4], [7, 9]])
Traceback (most recent call last):
...
ValueError: m_a should not be empty

Test case 7: ValueError if m_b is empty
>>> lazy_matrix_mul([[3, 5], [8, 1]], [[]])
Traceback (most recent call last):
...
ValueError: m_b should not be empty

Test case 8: TypeError if elements of m_a are not ints or floats
>>> lazy_matrix_mul([[1, 'b'], [4, 'x']], [[5, 6], [8, 9]])
Traceback (most recent call last):
...
TypeError: invalid data type in m_a for einsum

Test case 9: TypeError if elements of m_b are not ints or floats
>>> lazy_matrix_mul([[2, 4, 6], [1, 5, 8]], [[3, 'h'], ['x', 'l']])
Traceback (most recent call last):
...
TypeError: invalid data type in m_b for einsum

Test case 10: ValueError if m_a has unequal sized rows
>>> lazy_matrix_mul([[1, 3], [2, 5, 7]], [[4, 6], [8, 9]])
Traceback (most recent call last):
...
ValueError: shapes (2,3) and (2,2) not aligned

Test case 11: ValueError if m_b has unequal sized rows
>>> lazy_matrix_mul([[6, 8], [7, 8]], [[4, 5, 3], [5, 7]])
Traceback (most recent call last):
...
ValueError: shapes (2,2) and (2,3) not aligned

Test case 12: ValueError if m_a and m_b cannot be multiplied
>>> lazy_matrix_mul([[6, 7], [4, 8]], [[6, 9]])
Traceback (most recent call last):
...
ValueError: shapes (2,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)
